

// Посчитать сумму зарплат работников компании. sumSalaries(department)
let company = {
   sales: [{ name: 'John', salary: 1000 }, { name: 'Alice', salary: 600 }],
   development: {
      sites: [{ name: 'Peter', salary: 2000 }, { name: 'Alex', salary: 1800 }],
      internals: [{ name: 'Jack', salary: 1300 }]
   }
};


// Написать функцию приводящую в движение красный квадрат при нажатии кнопки "move" с помощью рекурсии.
// Применить рекурсию через setTimeout()
let offset = 0;

// Напишите функцию sumTo(n), которая вычисляет сумму чисел до данного (1 + 2 + ... + n.)
// Через цикл


// Через рекурсию


// Через  арифметическую прогрессию



/*
 Вычислить факториал. Факториал натурального числа – это число, умноженное на "себя минус один",
затем на "себя минус два", и так далее до 1. Факториал n обозначается как n!
 Определение факториала можно записать как:
n! = n * (n - 1) * (n - 2) * ...*1
 Задача – написать функцию factorial(n), которая возвращает n!, используя рекурсию.
*/


// console.log(factorial(3));
// console.log(factorial(4));
// console.log(factorial(5));

/*
 Последовательность чисел Фибоначчи определяется формулой Fn = Fn-1 + Fn-2.
То есть, следующее число получается как сумма двух предыдущих. Первые два числа равны 1, 
затем 2(1+1), затем 3(1+2), 5(2+3) и так далее: 1, 1, 2, 3, 5, 8, 13, 21....
 Написать функцию fib(n) которая возвращает n-е число Фибоначчи.
*/
/*
0 = 0 + 0 = 0
1 = 0 + 1 = 1
2 = 0 + 1 = 1
3 = 1 + 1 = 2
4 = 1 + 2 = 3
5 = 2 + 3 = 5
6 = 3 + 5 = 8
7 = 5 + 8 = 13
8 = 8 + 13 = 21
*/
// попробовать способ с переназначением переменных



// Написать функцию printList(list), которая выводит элементы списка по одному.
// Сделать два варианта решения: используя цикл и рекурсию.
let list = {
   value: 1,
   next: {
      value: 2,
      next: {
         value: 3,
         next: {
            value: 4,
            next: null
         }
      }
   }
};


// Написать функцию printReverseList(list), которая выводит элементы списка по одному в обратном порядке.


//  Написать функцию-счётчик(counter), которая может как увеличивать так и уменьшать значение.
// Использывать замыкания и функцию-конструктор

// let x = new Counter();
// console.log(x.up());
// console.log(x.up());
// console.log(x.up());
// console.log(x.up());
// console.log(x.down());
// console.log(x.down());
// console.log(x.down());
// console.log(x.down());


/*
 Напишить функцию sum, которая работает таким образом: sum(a)(b) = a + b.
На пример:
 sum(1)(2) = 3
 sum(5)(-1) = 4
*/




/*
 У нас есть встроенный метод arr.filter(f) для массивов. Он фильтрует все элементы с помощью функции f.
Если она возвращает true, то элемент добавится в возвращаемый массив.
Сделайте набор «готовых к употреблению» фильтров:

inBetween(a, b) – между a и b (включительно).
inArray([...]) – находится в данном массиве.
*/
let arr = [1, 2, 3, 4, 5, 6, 7];

// console.log(arr.filter(inBetween(3, 6)));
// console.log(arr.filter(inArray([1, 2, 10])));




/*
 У нас есть массив объектов, который нужно отсортировать. Нужен скрипт для укороченной запися функции сортировки.
users.sort(byField('name'));
users.sort(byField('age'));
*/

let users = [
   { name: "John", age: 20, surname: "Johnson" },
   { name: "Pete", age: 18, surname: "Peterson" },
   { name: "Ann", age: 19, surname: "Hathaway" }
];


// console.log(users.sort(byField('name')));
// console.log(users.sort(byField('age')));




// Написать рекурсивную функцию-счётчик, добавив к функции свойство "count" для отслеживания кол-ва вызовов.





// Функцию printNumbers(from, to) должна выводить число каждую секунду, начиная от from и заканчивая to.
// Сделать два варианта решения, через setInterval и setTimeout.







