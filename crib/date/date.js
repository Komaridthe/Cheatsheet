let { warn } = console;

warn("======== Создание с аргументами и без =========");
// без аргументов создастся объект с текущими датой и временем
let now = new Date();

// 0 соответствует 01.01.1970 UTC+0
let Jan01_1970 = new Date(0);
console.log(Jan01_1970);
/*
 Целое число, представляющее собой количество миллисекунд,
прошедших с начала 1970 года, называется таймстамп (англ. timestamp).
Преобразовать существующий объект Date в таймстамп, используя метод date.getTime()
*/
let milli = Jan01_1970.getTime();
console.log(milli);
console.log(now.getTime());

// Датам до 1 января 1970 будут соответствовать отрицательные таймстампы
let Dec31_1969 = new Date(-24 * 3600 * 1000);
console.log(Dec31_1969);
console.log(Dec31_1969.getTime());

// Если аргумент всего один, и это строка, то из неё «прочитывается» дата
let date = new Date("2017-01-26");
console.log(date);
// Время не указано, поэтому оно ставится в полночь по Гринвичу и
// меняется в соответствии с часовым поясом места выполнения кода

/*
* new Date(year, month, date, hours, minutes, seconds, ms)
 Создать объект Date с заданными компонентами в местном часовом поясе. Обязательны только первые два аргумента.
 · year должен состоять из четырёх цифр: значение 2013 корректно, 98 – нет.
 · month начинается с 0 (январь) по 11 (декабрь).
 · Параметр date здесь представляет собой день месяца. Если параметр не задан, то принимается значение 1.
 · Если параметры hours/minutes/seconds/ms отсутствуют, их значением становится 0.
*/
let date_2011 = new Date(2011, 0, 1, 0, 0, 0, 0); // 1 Jan 2011, 00:00:00
// --- || ----  new Date(2011, 0, 1);  то же самое, так как часы и проч. равны 0

warn("======== Получение компонентов даты =========");
// getFullYear() - Получить год (4 цифры)
console.log(now.getFullYear());

// getMonth() - Получить месяц (от 0 до 11) !!!
console.log(now.getMonth());

// getDate() - Получить день месяца (от 1 до 31)
console.log(now.getDate());

// getHours(), getMinutes(), getSeconds(), getMilliseconds() - Получить, соответственно, часы, минуты,
// секунды или миллисекунды
console.log(now.getHours());
console.log(now.getMinutes());
console.log(now.getSeconds());
console.log(now.getMilliseconds());

/*
* getDay()
 Вернуть день недели от 0 (воскресенье) до 6 (суббота). Несмотря на то, что в ряде стран
за первый день недели принят понедельник, в JavaScript начало недели приходится на воскресенье.
*/
console.log(now.getDay());
/*
 Все вышеперечисленные методы возвращают значения в соответствии с местным часовым поясом.
Однако существуют и их UTC-варианты, возвращающие день, месяц, год для временной зоны UTC+0.
Для их использования требуется после "get" подставить "UTC".
*/
// getUTCFullYear()
console.log(now.getUTCFullYear());

// getUTCMonth()
console.log(now.getUTCMonth());

//  getUTCDay()
console.log(now.getUTCDay());

// Вычисление часового пояса
let timezone = new Date();
console.log(timezone.getHours() - timezone.getUTCHours());

//! Помимо вышеприведённых методов, существуют два особых метода без UTC-варианта !!

// getTime() - Для заданной даты возвращает таймстамп (количество миллисекунд, прошедших с 1 января 1970 года UTC+0)
console.log(now.getTime());

// getTimezoneOffset() - Возвращает разницу в минутах между местным часовым поясом и UTC
console.log(now.getTimezoneOffset()); // Из UTC вычитает местный часовой пояс в минутах

warn("======== Установка компонентов даты =========");

let today = new Date();
// setFullYear(year, [month], [date])
console.log(today.setFullYear(0)); // В консоль возвращает в миллисекундах от 1970ого
// alert(today);  // В сообщение вернёт дату

// setMonth(month, [date])
console.log(today.setMonth(0));
// alert(today);

// setDate(date)
console.log(today.setDate(0));
// alert(today);

// setHours(hour, [min], [sec], [ms])
console.log(today.setHours(0));
// alert(today);

// setMinutes(min, [sec], [ms])
console.log(today.setMinutes(0));

// setSeconds(sec, [ms])
console.log(today.setSeconds(0));

// setMilliseconds(ms)
console.log(today.setMilliseconds(0));

// setTime(milliseconds) устанавливает дату в виде целого количества миллисекунд, прошедших с 01.01.1970 UTC
console.log(today.setTime(123));
// alert(today);

//! У всех этих методов, кроме setTime(), есть UTC-вариант, например: setUTCHours()

warn("======== Автоисправление даты =========");
/*
 Автоисправление – это очень полезная особенность объектов Date. 
Можно устанавливать компоненты даты вне обычного диапазона значений, а объект сам себя исправит.
*/
let auto = new Date(2021, 0, 32); // 32 Jan 2013 ?!?
console.log(auto); // ...1st Feb 2013!
/*
 Неправильные компоненты даты автоматически распределяются по остальным.
 Предположим, нам требуется увеличить дату «28 февраля 2016» на два дня.
В зависимости от того, високосный это год или нет, результатом будет «2 марта» или «1 марта».
Нам об этом думать не нужно. Просто прибавляем два дня. Объект Date позаботится об остальном.
*/
let autoTwo = new Date(2016, 1, 28);
console.log(autoTwo.setDate(autoTwo.getDate() + 2)); // 1 Mar 2016
// alert(autoTwo);

warn("=== Преобразование к числу, разность дат ===");

let time = new Date();
console.log(+time); // количество миллисекунд, то же самое, что date.getTime()

// Даты можно вычитать, в результате получаем разность в миллисекундах
let start = new Date();
for (let i = 0; i < 100000; i++) {
  let doSomething = i * i * i;
}
let end = new Date();
console.log(`Цикл отработал за ${end - start} миллисекунд`);

/*
* Date.now()
 Если нужно просто измерить время, объект Date нам не нужен.
Существует особый метод Date.now(), возвращающий текущую метку времени.
Семантически он эквивалентен new Date().getTime(), однако метод не создаёт промежуточный объект Date.
Так что этот способ работает быстрее и не нагружает сборщик мусора.
*/
let startNow = Date.now(); // количество миллисекунд с 1 января 1970 года
for (let i = 0; i < 100000; i++) {
  let doSomething = i * i * i;
}
let endNow = Date.now(); // заканчиваем отсчёт времени
console.log(`Цикл отработал за ${endNow - startNow} миллисекунд`); // вычитаются числа, а не даты

warn("========== Разбор строки с датой ===========");

// Date.parse(str) - метод считывает дату из строки (возвращает таймстамп).
/*
 Формат строки должен быть следующим: YYYY-MM-DDTHH:mm:ss.sssZ, где:
 · YYYY-MM-DD – это дата: год-месяц-день.
 · Символ "T" используется в качестве разделителя.
 · HH:mm:ss.sss – время: часы, минуты, секунды и миллисекунды.
 · Необязательная часть 'Z' обозначает часовой пояс в формате +-hh:mm.
   Если указать просто букву Z, то получим UTC+0.

 Возможны и более короткие варианты, например, YYYY-MM-DD или YYYY-MM, или даже YYYY.
*/
let ms = Date.parse("2012-01-26T13:51:50.417-07:00");
console.log(ms); //  Если формат неправильный, возвращается NaN.
console.log(new Date(ms)); // Создать объект new Date из таймстампа

warn("================ Задачи ================");

// Создайть объект Date для даты: 20 февраля 2012 года, 3 часа 12 минут. Временная зона – местная.

//=============================================================================

/*
 Написать функцию getWeekDay(date), показывающую день недели в коротком формате:
«ПН», «ВТ», «СР», «ЧТ», «ПТ», «СБ», «ВС».
Вывести ответ на страницу в параграф (p).
*/

//=============================================================================

/*
 В Европейских странах неделя начинается с понедельника (день номер 1), затем идёт вторник (номер 2)
и так до воскресенья (номер 7). Напишите функцию getLocalDay(date), которая возвращает
«европейский» день недели для даты date.
*/

//=============================================================================
/*
 Создайте функцию getDateAgo(date, days), возвращающую число, которое было "days" дней назад от даты "date".
К примеру, если сегодня двадцатое число, то getDateAgo(new Date(), 1) вернёт девятнадцатое.
*/

//=============================================================================
/*
 Напишите функцию getLastDayOfMonth(year, month), возвращающую последнее число месяца.
Иногда это 30, 31 или даже февральские 28/29.
 Параметры:
year – год из четырёх цифр, например, 2012.
month – месяц от 0 до 11.
 К примеру, getLastDayOfMonth(2012, 1) = 29 (високосный год, февраль).
*/

//=============================================================================
// Напишите функцию getSecondsToday(), возвращающую количество секунд с начала сегодняшнего дня.
// Функция должна работать в любой день, т.е. в ней не должно быть конкретного значения сегодняшней даты.

//=============================================================================
// Создайте функцию getSecondsToTomorrow(), возвращающую количество секунд до завтрашней даты.
// Функция должна работать в любой день, т.е. в ней не должно быть конкретного значения сегодняшней даты.
