/*
 Написать пример прокси для защиты свойства, начинающиеся на _, от доступа извне.
 · get – для того, чтобы сгенерировать ошибку при чтении такого свойства (прописать возможность доступа собственного метода),
 · set – для того, чтобы сгенерировать ошибку при записи,
 · deleteProperty – для того, чтобы сгенерировать ошибку при удалении,
 · ownKeys – для того, чтобы исключить такие свойства из for..in и методов типа Object.keys.
 Сделать проверки.
*/
let user = {
   name: 'Ivan',
   _password: '******'
}


/*
 Обычно при чтении несуществующего свойства из объекта возвращается undefined.
Создайте прокси, который генерирует ошибку при попытке прочитать несуществующее свойство.
 Напишите функцию wrap(target), которая берёт объект target и возвращает прокси, 
добавляющий в него этот аспект функциональности.
*/
let userTwo = {
   name: "John"
};

function wrap(target) {
   return new Proxy(target, {
      /* код */
   });
}

userTwo = wrap(userTwo);

console.log(userTwo.name); // John
console.log(userTwo.age); // Ошибка: такого свойства не существует



/*
 В некоторых языках программирования возможно получать элементы массива, используя отрицательные индексы,
отсчитываемые с конца.
 let array = [1, 2, 3]; 
 array[-1]; // 3, последний элемент
 array[-2]; // 2, предпоследний элемент
 array[-3]; // 1, за два элемента до последнего
Другими словами, array[-N] – это то же, что и array[array.length - N].
Создайте прокси, который реализовывал бы такое поведение.
*/
let array = [1, 2, 3];

// код


console.log(array[-1]); // 3
console.log(array[-2]); // 2
















